//  @author : Secure, Trusted, and Assured Microelectronics (STAM) Center
//
//  Copyright (c) 2024 STAM Center (SCAI/ASU)
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.


// Module that performs multiplication between two 256-bit unsigned integers.

// Pipelined design: supports multiple in-flight computations.
//     - Latency: 3 clock cycles (including the cycle in which inputs are injected).
//     - Pipeline length: 3 clock cycles.
//     - Accepts new request in every clock cycle.

// WARNING: This code is optimized for devices having 27-by-N-bit DSP units, where N >= 27.

module mult_256_sync (
    input clk,
    input [256-1:0] num1,
    input [256-1:0] num2,
    output [2*256-1:0] product
);

reg [2*256-1:0] partial_product_lo [0:10-1];
reg [2*256-1:0] partial_product_hi [0:10-1];

reg [256-1:0] num1_saved;
reg [256-1:0] num2_saved;
reg [2*256-1:0] sum_tree_lo_saved [0:2-1];

genvar i;

wire [16*2*256-1:0] addends_lo;
wire [2*256-1:0] sum_lo;
generate
    for (i = 0; i < 10; i = i+1) begin : ADDENDS_LO_PACK
        assign addends_lo[2*256*i +: 2*256] = partial_product_lo[i];
    end
    for (i = 10; i < 16; i = i+1) begin : ADDENDS_LO_PACK_ZERO
        assign addends_lo[2*256*i +: 2*256] = 'b0;
    end
endgenerate
sum_tree #(
    .N_BITS(2*256),
    .N_ADDENDS(16)
) SUM_TREE_LO (
    .addends(addends_lo),
    .sum(sum_lo)
);

wire [16*2*256-1:0] addends_hi;
wire [2*256-1:0] sum_hi;
generate
    for (i = 0; i < 10; i = i+1) begin : ADDENDS_HI_PACK
        assign addends_hi[2*256*i +: 2*256] = partial_product_hi[i];
    end
    for (i = 10; i < 16; i = i+1) begin : ADDENDS_HI_PACK_ZERO
        assign addends_hi[2*256*i +: 2*256] = 'b0;
    end
endgenerate
sum_tree #(
    .N_BITS(2*256),
    .N_ADDENDS(16)
) SUM_TREE_HI (
    .addends(addends_hi),
    .sum(sum_hi)
);

assign product = sum_tree_lo_saved[0] + (sum_hi << 128);

// Operation logic
always @(posedge clk) begin
    partial_product_lo[0] <= num1[128*0 +: 128] * num2[27*0 +: 27];
    partial_product_lo[1] <= num1[128*0 +: 128] * num2[27*1 +: 27];
    partial_product_lo[2] <= num1[128*0 +: 128] * num2[27*2 +: 27];
    partial_product_lo[3] <= num1[128*0 +: 128] * num2[27*3 +: 27];
    partial_product_lo[4] <= num1[128*0 +: 128] * num2[27*4 +: 27];
    partial_product_lo[5] <= num1[128*0 +: 128] * num2[27*5 +: 27];
    partial_product_lo[6] <= num1[128*0 +: 128] * num2[27*6 +: 27];
    partial_product_lo[7] <= num1[128*0 +: 128] * num2[27*7 +: 27];
    partial_product_lo[8] <= num1[128*0 +: 128] * num2[27*8 +: 27];
    partial_product_lo[9] <= num1[128*0 +: 128] * num2[27*9 +: 13];

    num1_saved <= num1;
    num2_saved <= num2;

    sum_tree_lo_saved[0] <= sum_lo;
    sum_tree_lo_saved[1] <= sum_tree_lo_saved[0];

    partial_product_hi[0] <= num1_saved[128*1 +: 128] * num2_saved[27*0 +: 27];
    partial_product_hi[1] <= num1_saved[128*1 +: 128] * num2_saved[27*1 +: 27];
    partial_product_hi[2] <= num1_saved[128*1 +: 128] * num2_saved[27*2 +: 27];
    partial_product_hi[3] <= num1_saved[128*1 +: 128] * num2_saved[27*3 +: 27];
    partial_product_hi[4] <= num1_saved[128*1 +: 128] * num2_saved[27*4 +: 27];
    partial_product_hi[5] <= num1_saved[128*1 +: 128] * num2_saved[27*5 +: 27];
    partial_product_hi[6] <= num1_saved[128*1 +: 128] * num2_saved[27*6 +: 27];
    partial_product_hi[7] <= num1_saved[128*1 +: 128] * num2_saved[27*7 +: 27];
    partial_product_hi[8] <= num1_saved[128*1 +: 128] * num2_saved[27*8 +: 27];
    partial_product_hi[9] <= num1_saved[128*1 +: 128] * num2_saved[27*9 +: 13];
end

endmodule

module sum_tree #(
    parameter N_BITS,
    parameter N_ADDENDS // Must be a power of two
) (
    input [N_ADDENDS*N_BITS-1:0] addends,
    output [N_BITS-1:0] sum
);

localparam N_TREE_LEVELS = 1 + $clog2(N_ADDENDS);
localparam N_TREE_NODES = 2*N_ADDENDS - 1;

wire [N_BITS-1:0] tree [0:N_TREE_NODES-1];

genvar i, j;

generate
    for (i = 0; i < N_ADDENDS; i = i+1) begin : UNPACK
        assign tree[2**(N_TREE_LEVELS-1) - 1 + i] = addends[N_BITS*i +: N_BITS];
    end
endgenerate

generate
    for (j = 0; j < N_TREE_LEVELS-1; j = j+1) begin : TREE_LEVEL
        for (i = 0; i < 2**j; i = i+1) begin : TREE_CONNECT
            assign tree[2**j - 1 + i] = (
                tree[2**(j+1) - 1 + 2*i]
                + (tree[2**(j+1) - 1 + 2*i + 1] << (27*(2**(N_TREE_LEVELS-2-j))))
            );
        end
    end
endgenerate

assign sum = tree[0];

endmodule
